#
# .github/workflows/build-on-windows.yml
#
# Copyright 2021 Jens A. Koch.
# SPDX-License-Identifier: BSL-1.0
# This file is part of ttauri-project.
#

name: "Build on Windows"
on: [push, pull_request]
jobs:
  build:
    name: ${{ matrix.config.VCPKG_TARGET_TRIPLET }}
    #needs: install-vulkan-sdk-and-runtime
    # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        config:
          - { VCPKG_TARGET_TRIPLET: x64-windows-static}

    env:
      BUILD_TYPE: RelWithDebInfo
      PLATFORM: x64
      VCPKG_ROOT: C:\tools\vcpkg
      VULKAN_SDK: ${{ needs.install-vulkan-sdk-and-runtime.outputs.VULKAN_SDK }}

    defaults:
      run:
        shell: cmd

    steps:
      - name: ü§ò Checkout Code
        uses: actions/checkout@v2 # https://github.com/actions/checkout

      - name: ‚Ñπ Show Tool Versions
        run: |
          date /T
          time /T
          curl -V
          cmake --version
          echo NUMBER_OF_PROCESSORS=%NUMBER_OF_PROCESSORS%

      # Build Artifact
      # ---------------
      # The ECPACK artifact contains files for building a signed installer, including the "ecpack.json" manifest file.
      #
      # Naming Scheme:
      #
      #  - $ECPACK_ARTIFACT_NAME  :  ttauri-hello-world-0-3-0-x64-windows-static-ecpack
      #
      # When we package the ECPACK artifact:
      #
      #  - $ECPACK_NAME is used to create a .json file and a storage directory with the suffix "-files"
      #  - $ECPACK_ARTIFACT_NAME is used to name the final ECPACK .zip file
      #    it contains a VERSION number without dots ($VERSION_NODOTS) and the suffix "-ecpack".
      #
      - name: ‚úè Fetch Versioning Data & Set Build Artifact Names
        shell: pwsh
        run: |
          $NAME=$(jq -r .name vcpkg.json)
          $VERSION=$(jq -r .version vcpkg.json)
          $COMPILER="MSVC19"
          $TRIPLET="${{ matrix.config.VCPKG_TARGET_TRIPLET }}"
          $BUILD_TYPE="$env:BUILD_TYPE"
          $VERSION_NODOTS=$($VERSION -replace "\.","-")
          $ECPACK_ARTIFACT_NAME="$NAME-$VERSION_NODOTS-$TRIPLET-ecpack"
          $ECPACK_NAME="$NAME-$VERSION-$TRIPLET"
          echo "VERSION=$($VERSION)" >> $env:GITHUB_ENV
          echo "ECPACK_ARTIFACT_NAME=$($ECPACK_ARTIFACT_NAME)" >> $env:GITHUB_ENV
          echo "ECPACK_NAME=$($ECPACK_NAME)" >> $env:GITHUB_ENV

      - name: üìù Set TTAURI_DEVELOPMENT=ON and use local vcpkg-overlay-ports folder (on all branches, except main)
        shell: pwsh
        if: github.ref != 'refs/heads/main' && github.base_ref != 'refs/heads/main'
        run: |
          echo "TTAURI_DEVELOPMENT=ON" >> $env:GITHUB_ENV

      - name: üìù Set TTAURI_DEVELOPMENT=OFF (only on main branch)
        shell: pwsh
        if: github.ref == 'refs/heads/main' || github.base_ref == 'refs/heads/main'
        run: |
          echo "TTAURI_DEVELOPMENT=OFF" >> $env:GITHUB_ENV

      - name: üìù Get Vulkan SDK version number
        id: vulkan-version
        uses: ttauri-project/install-vulkan-sdk-action@v1
        with:
          install: false

      - name: üìù Set VULKAN_SDK & VULKAN_VERSION
        shell: pwsh
        run: |
          echo "VULKAN_SDK=${{ steps.vulkan-version.outputs.VULKAN_SDK }}" >> $env:GITHUB_ENV
          echo "VULKAN_VERSION=${{ steps.vulkan-version.outputs.VULKAN_VERSION }}" >> $env:GITHUB_ENV

      - name: üéØ Cache VULKAN SDK & Runtime
        id: cache-vulkan
        uses: actions/cache@v1 # https://github.com/actions/cache
        with:
          path: ${{ env.VULKAN_SDK }}
          key: cache-windows-vulkan-${{ env.VULKAN_VERSION }}

      - name: üîΩ Install Vulkan SDK
        if: steps.cache-vulkan.outputs.cache-hit != 'true'
        uses: ttauri-project/install-vulkan-sdk-action@v1
        with:
          install: true

      - name: üîΩ Install Visual Studio Components for C++, CMake, Win10SDK
        shell: pwsh
        run: |
          $VSConfig = Resolve-Path ".\.github\.vsconfig" | select -ExpandProperty Path
          cd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
          $InstallPath = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise"
          $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "$InstallPath", '--config', "$VSConfig", '--quiet', '--norestart', '--nocache')
          $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
          $process.ExitCode

      - name: üìù Setup VC Environment (‚ûî vcvarsall)
        run: call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %PLATFORM%

      - name: üîΩ Clone vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git %VCPKG_ROOT%

      - name: üìù Setup vcpkg environment
        working-directory: ${{ env.VCPKG_ROOT }}
        run: |
          %VCPKG_ROOT%\bootstrap-vcpkg.bat -disableMetrics
          %VCPKG_ROOT%\vcpkg integrate install --triplet=${{ matrix.config.VCPKG_TARGET_TRIPLET }} --feature-flags=manifests

      - name: ‚ùî CHECK important folders, to see if everything is present (before building)
        run: |
          dir %VULKAN_SDK%\Bin
          dir %VULKAN_SDK%\runtime\%PLATFORM%
          dir %VCPKG_ROOT%

      - name: ‚úè CMake ‚ûî Configure (including VCPKG ‚ûî Install Dependencies)
        run: |
          mkdir build && cd build
          cmake -G "Visual Studio 16 2019" -A ${{ env.PLATFORM }} ..                        ^
                -DCMAKE_BUILD_TYPE=%BUILD_TYPE%                                             ^
                -DCMAKE_TOOLCHAIN_FILE=%VCPKG_ROOT%/scripts/buildsystems/vcpkg.cmake     ^
                -DVCPKG_TARGET_TRIPLET=${{ matrix.config.VCPKG_TARGET_TRIPLET }}            ^
                -DTTAURI_DEVELOPMENT=${{ env.TTAURI_DEVELOPMENT }}                          ^
                -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: üôè CMake ‚ûî Build
        run: cmake --build build --config %BUILD_TYPE% -j %NUMBER_OF_PROCESSORS%

      - name: üìÅ CMake ‚ûî Install
        run: cmake --install build --config %BUILD_TYPE% --prefix build/ttauri-hello-world-%VERSION% --verbose

      - name: üì¶ CMake ‚ûî Package
        run: cmake --build build --config %BUILD_TYPE% --target package

      - name: ‚ùî CHECK important folders, to see if everything is present (after building)
        run: |
          dir build
          dir /S /B build\vcpkg_installed\${{ matrix.config.VCPKG_TARGET_TRIPLET }}
          dir /S /B build\ttauri-hello-world-%VERSION%

      - name: üì¶ üî® Package Artifact ‚ûî ECPACK
        shell: pwsh
        run: |
          Push-Location "build\${{ env.ECPACK_NAME }}-files"
          Copy-Item "..\${{ env.ECPACK_NAME }}.json" -Destination "ecpack.json"
          7z a -r -- "..\${{ env.ECPACK_ARTIFACT_NAME }}.zip" "*"
          Pop-Location

      - name: üì¶ üöÄ Upload Artifact ‚ûî ECPACK
        uses: actions/upload-artifact@v2 # https://github.com/actions/upload-artifact
        with:
          name: ${{ env.ECPACK_ARTIFACT_NAME }}
          path: build\${{ env.ECPACK_ARTIFACT_NAME }}.zip
