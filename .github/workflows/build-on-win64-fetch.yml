#
# .github/workflows/build-on-windows.yml
#
# Copyright 2021 Jens A. Koch.
# SPDX-License-Identifier: BSL-1.0
# This file is part of hikogui.
#

name: "Build on Windows"
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

# improve CI concurrency by automatically cancelling outdated jobs
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        CMAKE_CXX_COMPILER: ["cl", "clang"]

    name: x64-windows ${{matrix.CMAKE_CXX_COMPILER}} FetchContent

    # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: windows-2022
    
    env:
      MATRIX_ID: ${{matrix.CMAKE_CXX_COMPILER}}
      BUILD_DIR: ${{github.workspace}}/build
      INSTALL_DIR: ${{github.workspace}}/install

    defaults:
      run:
        shell: cmd
    
    steps:
      - name: 🔽 Checkout Code
        uses: actions/checkout@v4 # https://github.com/actions/checkout

      # https://community.chocolatey.org/packages/ninja
      # https://community.chocolatey.org/packages/ccache
      - name: 🔽 Install Ninja
        run: choco install ninja ccache

      - name: 🛠️ Setup Visual Studio Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
    
      - name: 🔽 Install Vulkan SDK
        uses: jakoch/install-vulkan-sdk-action@v1.0.3 # https://github.com/jakoch/install-vulkan-sdk-action/
        with: 
          vulkan_version: latest
          optional_components: com.lunarg.vulkan.vma
          install_runtime: true
          cache: true
          stripdown: true  

      # Build Artifact
      # ---------------
      # The ECPACK artifact contains files for building a signed installer, including the "ecpack.json" manifest file.
      #
      # Naming Scheme:
      #
      #  - $ECPACK_NAME  :  hikogui-hello-world-0.3.0-win64
      #
      # When we package the ECPACK artifact:
      #
      #  - ${{ECPACK_NAME}} is used to create a .json file and a storage directory with the suffix "-files"
      #  - ${{ECPACK_NAME}}-ecpack is used to name the final ecpack.zip file
      #
      - name: 📝 Fetch version data & set build artifact names
        shell: pwsh
        run: |
          $NAME=$(jq -r .name vcpkg.json).replace('-', '_')
          $VERSION=$(jq -r .version vcpkg.json)
          echo "ECPACK_NAME=$NAME-$VERSION-win64" >> $env:GITHUB_ENV

      - name: ✏ CMake ➔ Make Build Directory
        shell: pwsh
        run: mkdir "${{env.BUILD_DIR}}"
  
      - name: ✏ CMake ➔ Configure
        working-directory: ${{env.BUILD_DIR}}
        shell: pwsh
        run: >
          cmake
          -G "Ninja Multi-Config"
          "-DCMAKE_C_COMPILER=${{matrix.CMAKE_CXX_COMPILER}}"
          "-DCMAKE_CXX_COMPILER=${{matrix.CMAKE_CXX_COMPILER}}"
          "-DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}}"
          "-DCMAKE_CONFIGURATION_TYPES=Debug;Release;RelWithDebInfo"
          ..

      - name: 🙏 CMake ➔ Build Debug
        working-directory: ${{env.BUILD_DIR}}
        run: cmake --build . --config Debug --parallel 1
    
      - name: 📦 CMake ➔ Install Debug
        working-directory: ${{env.BUILD_DIR}}
        run: cmake --install . --config Debug
  
      - name: 🙏 CMake ➔ Build RelWithDebInfo
        working-directory: ${{env.BUILD_DIR}}
        run: cmake --build . --config RelWithDebInfo --parallel 1
    
      - name: 📦 CMake ➔ Install RelWithDebInfo
        working-directory: ${{env.BUILD_DIR}}
        run: cmake --install . --config RelWithDebInfo
  
      - name: 🙏 CMake ➔ Build Release
        working-directory: ${{env.BUILD_DIR}}
        run: cmake --build . --config Release --parallel 1
    
      - name: 📦 CMake ➔ Install Release
        working-directory: ${{env.BUILD_DIR}}
        run: cmake --install . --config Release
  
      - name: 📦 CMake ➔ Package
        working-directory: ${{env.BUILD_DIR}}
        run: |
          cpack .
          copy "${{env.ECPACK_NAME}}.json" "${{env.ECPACK_NAME}}-files\ecpack.json"

      - name: 🚀 Upload Artifact ➔ ECPACK
        uses: actions/upload-artifact@v3
        with:
          name: ${{env.ECPACK_NAME}}-ecpack
          path: ${{env.BUILD_DIR}}\${{env.ECPACK_NAME}}-files\
