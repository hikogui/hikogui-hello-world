#-------------------------------------------------------------------
# AppVeyor build configuration
# https://www.appveyor.com/docs/
# https://www.appveyor.com/docs/appveyor-yml/
#-------------------------------------------------------------------

clone_depth: 5

version: '{build}'

#-------------------------------------------------------------------
#     Build configuration
#-------------------------------------------------------------------

# defaults
platform: x64
configuration: Release

environment:
    # appveyor
    APPVEYOR_SAVE_CACHE_ON_ERROR: true
    APPVEYOR_CACHE_ENTRY_ZIP_ARGS: -t7z -m0=lzma -mx=5
    APPVEYOR_RDP_PASSWORD: somePassword#123

    # vcpkg
    VCPKG_ROOT: "C:\\Tools\\vcpkg"

    # vulkan
    VULKAN_VERSION: "1.2.162.1"
    VULKAN_SDK: "C:\\VulkanSDK\\%VULKAN_VERSION%"

    # the build matrix
    #   Platform | Compiler | Target Triplet | Build Type
    matrix:
        #
        # Windows | MSVC 2019 | x64-windows-static | ReleaseWithDebugInfo
        #
        - APPVEYOR_JOB_NAME: Win-MSVC19-x64-Static-RelWithDebInfo
          VCPKG_TARGET_TRIPLET: "x64-windows-static"
          COMPILER: MSVC19
          BUILD_TYPE: RelWithDebInfo
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019 Preview

build:
    # MSBuild verbosity level
    verbosity: minimal

# scripts that are called at very beginning, before repo cloning
init:
    - ps: |
        date /T & time /T
        curl -V
        cmake --version
        msbuild /version
        vcpkg version
        if ($env:COMPILER -eq "CLANG) { clang++ -v }
        Write-Host "NUMBER_OF_PROCESSORS=$env:NUMBER_OF_PROCESSORS"

install:
    - ps: |
        # If appveyor was launched due to a tag push:
        #  The BUILD_VERSION_NUMBER is the name of the tag, example: "v1.2.3"
        # If appveyor was launched due to an commit or pull request:
        #  The BUILD_VERSION_NUMBER is extracted from `cvpkg.txt`,
        #  together with the first 7 sha-digits, example: "v1.2.3-89abcde"
        #
        # The BUILD_VERSION_NUMBER is later also used for naming the release folder, e.g.
        # "[APPVEYOR_PROJECT_SLUG]-[BUILD_VERSION_NUMBER]" -> "ttauri_hello_world-v1.2.3-89abcde".
        if ($env:APPVEYOR_REPO_TAG -eq "true") {
            $env:BUILD_VERSION_NUMBER = "$env:APPVEYOR_REPO_TAG_NAME"
        } else {
            $vcpkg_json = Get-Content "vcpkg.json" -Raw | ConvertFrom-Json
            $env:BUILD_VERSION_NUMBER = "v$($vcpkg_json.version)-$($env:APPVEYOR_REPO_COMMIT.substring(0,7))"
        }
        Write-Host "build_version_number -> $env:BUILD_VERSION_NUMBER"
        Update-AppveyorBuild -Version "$env:BUILD_VERSION_NUMBER"

        # Update VCPKG use our custom version to be able to use ttauri
        Push-Location "C:\Tools\vcpkg"
        git remote set-url origin https://github.com/ttauri-project/vcpkg.git
        git fetch origin
        git checkout ttauri-port
        git pull --quiet
        .\bootstrap-vcpkg.bat -disableMetrics
        vcpkg version
        Pop-Location
        vcpkg integrate install --triplet=$env:VCPKG_TARGET_TRIPLET --feature-flags=manifests

        # Install VULKAN_SDK
        if (-not (Test-Path -LiteralPath $env:VULKAN_SDK)) {
           curl -L --silent --show-error --output Vulkan_SDK_Installer.exe https://sdk.lunarg.com/sdk/download/$env:VULKAN_VERSION/windows/VulkanSDK-$env:VULKAN_VERSION-Installer.exe?Human=true
           Vulkan_SDK_Installer.exe /S
        }
        Get-ChildItem "$env:VULKAN_SDK"

        # Install Vulkan Runtime (for vulkan-1.dll)
        if (-not (Test-Path -LiteralPath $env:VULKAN_SDK\runtime)) {
            curl -L --silent --show-error --output vulkan-runtime.zip https://sdk.lunarg.com/sdk/download/$env:VULKAN_VERSION/windows/vulkan-runtime-components.zip?Human=true
            7z e vulkan-runtime.zip -o"$env:VULKAN_SDK\runtime\$env:PLATFORM" */$env:PLATFORM
        }
        Get-ChildItem "$env:VULKAN_SDK\runtime\$env:PLATFORM"

    # Init MSVC environment, see https://www.appveyor.com/docs/lang/cpp/
    - cmd: if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2019 Preview"
            (call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Auxiliary\Build\vcvarsall.bat" %PLATFORM% )
    - cmd: if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2019"
            (call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" %PLATFORM% )

before_build:
    - ps: |
          # CHECK important folders to see if everything is present
          Write-Host "Current Directory: $(Get-Location)"
          Get-ChildItem
          Get-ChildItem $env:VULKAN_SDK\Bin

build_script:
    - ps: |
        mkdir "build"
        Push-Location "build"

        #
        # generate build files
        #
        if ("$env:COMPILER" -eq "MSVC19") {
            cmake -G "Visual Studio 16 2019" -A $env:PLATFORM ..
                  -DVCPKG_TARGET_TRIPLET=$env:VCPKG_TARGET_TRIPLET
                  -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
        }
        if ("$env:COMPILER" -eq "CLANG") {
            cmake -G "Visual Studio 16 2019" -A $env:PLATFORM -T ClangCL ..
                  -DVCPKG_TARGET_TRIPLET=$env:VCPKG_TARGET_TRIPLET
                  -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
                  -DCMAKE_C_COMPILER=C:/PROGRA~1/LLVM/bin/clang.exe
                  -DCMAKE_CXX_COMPILER=C:/PROGRA~1/LLVM/bin/clang-cl.exe
        }
        
        #
        # build
        #
        cmake --build . --config $env:BUILD_TYPE -j $($env:NUMBER_OF_PROCESSORS + 1) -- /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
        
        #
        # install
        #
        cmake --install . --config $env:BUILD_TYPE --prefix ..\install --strip --verbose
        
        #
        # package
        #
        cmake --build . --config $env:BUILD_TYPE --target package

        Pop-Location

after_build:
    - ps: |
        # Check if all build artifacts are present, before packaging.
        Get-ChildItem "build"
        Get-ChildItem "install"

on_failure:
    - ps: |
        Push-AppveyorArtifact "$env:APPVEYOR_BUILD_FOLDER\build\CMakeFiles\CMakeOutput.log"
        Push-AppveyorArtifact "$env:APPVEYOR_BUILD_FOLDER\build\CMakeFiles\CMakeError.log"

#-------------------------------------------------------------------
#     Build Artifacts
#-------------------------------------------------------------------

artifacts:
    - path: build\$env:APPVEYOR_PROJECT_SLUG-*.exe
      name: install-exe

#-------------------------------------------------------------------
#     Deployment configuration
#-------------------------------------------------------------------

# deploy to Github Releases on tag push (conditional deploy)
#deploy:
#  provider: GitHub
#  release: 'hello-world $(APPVEYOR_REPO_TAG_NAME)'
#  tag: $(APPVEYOR_REPO_TAG_NAME)
#  #description: '[**Changelog**](https://github.com/ttauri-project/ttauri_hello_world/blob/main/CHANGELOG.md)'
#  artifact: ttauri_hello_world_zip
#  draft: false
#  prerelease: false
#  force_update: true               # overwrite files of existing release on GitHub (for re-releasing)
#  on:
#    branch: main                   # release from main branch only
#    appveyor_repo_tag: true        # deploy on tag push only
#  auth_token:                      # encrypted token from GitHub
#    secure: *hash*

#-------------------------------------------------------------------
#     Cache things until an appveyor.yml file change
#-------------------------------------------------------------------

cache:
  - C:\Tools\vcpkg\installed -> appveyor.yml
  - '%VULKAN_SDK%\Bin -> appveyor.yml'
  - '%VULKAN_SDK%\Bin32 -> appveyor.yml'
  - '%VULKAN_SDK%\Include -> appveyor.yml'
  - '%VULKAN_SDK%\Lib -> appveyor.yml'
  - '%VULKAN_SDK%\Lib32 -> appveyor.yml'
  - '%VULKAN_SDK%\runtime -> appveyor.yml'

#-------------------------------------------------------------------
#     Accessing Windows build worker via Remote Desktop (RDP)
#-------------------------------------------------------------------

# Enable RDP session to Appveyor server by enabling the two on_finish lines.
# You connect using a remote desktop connection (e.g. using mstsc.exe).
# Use PW from APPVEYOR_RDP_PASSWORD above. A session lasts 60min max.
# Do not forget to disable the following lines, when you solved the problem.

#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
