#
# .github/workflows/build-on-windows.yml
#
# Copyright 2021 Jens A. Koch.
# SPDX-License-Identifier: BSL-1.0
# This file is part of hikogui.
#

name: "Build on Windows"
on: [push, pull_request]
jobs:
  build:
    name: ${{matrix.config.NAME}}
    # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: ${{matrix.config.OS}}

    strategy:
      fail-fast: false
      matrix:
        # Each entry in config has a:
        # - NAME: The name used as the suffix in files, directories and artifacts.
        #         If the name ends with "-debug" code-coverage is being uploaded.
        # - OS: The operating system to run the job on.
        # - VCPKG_TARGET_TRIPLET: The vcpkg target triplet, or empty if cmake should use fetch.
        # - CMAKE_PRESET: The cmake preset to load.
        config:
          - {
              NAME: "vc17-x64-windows-static-rel-fetch",
              OS: windows-2022,
              VCPKG_TARGET_TRIPLE: "",
              CMAKE_PRESET: Z-CI-vc17-x64-windows-static-rel-fetch
            }
          - {
              NAME: "vc17-x64-windows-static-rel-vcpkg",
              OS: windows-2022,
              VCPKG_TARGET_TRIPLE: "x64-windows-static",
              CMAKE_PRESET: Z-CI-vc17-x64-windows-static-rel-vcpkg
            }

    env:
      PLATFORM: x64
      VCPKG_ROOT: C:\tools\vcpkg

    defaults:
      run:
        shell: cmd

    steps:
      - name: 🔽 Checkout Code
        uses: actions/checkout@v2 # https://github.com/actions/checkout

      # Build Artifact
      # ---------------
      # The ECPACK artifact contains files for building a signed installer, including the "ecpack.json" manifest file.
      #
      # Naming Scheme:
      #
      #  - $ECPACK_NAME  :  hikogui-hello-world-0.3.0-win64
      #
      # When we package the ECPACK artifact:
      #
      #  - ${{ECPACK_NAME}} is used to create a .json file and a storage directory with the suffix "-files"
      #  - ${{ECPACK_NAME}}-ecpack is used to name the final ecpack.zip file
      #
      - name: 📝 Fetch version data & set build artifact names
        shell: pwsh
        run: |
          $NAME=$(jq -r .name vcpkg.json)
          $VERSION=$(jq -r .version vcpkg.json)
          echo "VERSION=$VERSION" >> $env:GITHUB_ENV
          echo "ECPACK_NAME=$NAME-$VERSION-win64" >> $env:GITHUB_ENV
          echo "BUILD_NUMBER_OF_JOBS=${env:NUMBER_OF_PROCESSORS}" >> $env:GITHUB_ENV
          echo "CMAKE_PRESET_MAIN_SUFFIX=-main" >> $env:GITHUB_ENV

      # This clears the CMAKE_PRESET_MAIN_SUFFIX when the current branch is main.
      # Because the main branch should use the release version of HikoGUI and not the main-branch version.
      - name: 📝 Set CMAKE_PRESET_MAIN_SUFFIX='' (only on main branch)
        shell: pwsh
        if: github.ref == 'refs/heads/main' && (github.base_ref == 'refs/heads/main' || github.base_ref == '')
        run: echo "CMAKE_PRESET_MAIN_SUFFIX=''" >> $env:GITHUB_ENV

      - name: 📝 Get Vulkan SDK version number
        id: vulkan-version
        uses: hikogui/install-vulkan-sdk-action/sdk-version@v3

      - name: 🎯 Cache VULKAN SDK & Runtime
        id: cache-vulkan
        uses: actions/cache@v1
        with:
          path: ${{steps.vulkan-version.outputs.VULKAN_SDK}}
          key: cache-windows-vulkan-${{steps.vulkan-version.outputs.VULKAN_VERSION}}-2

      - name: 🔽 Install Vulkan SDK
        if: steps.cache-vulkan.outputs.cache-hit != 'true'
        uses: hikogui/install-vulkan-sdk-action/install-sdk@v3
        with:
          VULKAN_VERSION: ${{steps.vulkan-version.outputs.VULKAN_VERSION}}
          VULKAN_SDK: ${{steps.vulkan-version.outputs.VULKAN_SDK}}

      - name: 📝 Set VULKAN_SDK
        shell: pwsh
        run: |
          echo "VULKAN_SDK=${{steps.vulkan-version.outputs.VULKAN_SDK}}" >> $env:GITHUB_ENV
          dir ${{env.VULKAN_SDK}}\Bin
          dir ${{env.VULKAN_SDK}}\runtime\${{env.PLATFORM}}

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: 🔽 Install vcpkg
        if: matrix.config.VCPKG_TARGET_TRIPLE != ''
        shell: pwsh
        run: |
          git clone -b master --single-branch --depth 1 --quiet https://github.com/microsoft/vcpkg.git "${{env.VCPKG_ROOT}}"
          cd "${{env.VCPKG_ROOT}}"
          .\bootstrap-vcpkg.bat -disableMetrics
          .\vcpkg integrate install --feature-flags=manifests
          .\vcpkg version

      - name: 🔽 Prepare source and build directory
        run: |
          mkdir data\redist
          mkdir build
          curl -V
          curl "https://aka.ms/vs/17/release/vc_redist.x64.exe" --output "data\redist\VC_redist.x64.exe" --silent

      - name: 📐 CMake ➔ Configure
        run: |
          cmake --preset=${{matrix.config.CMAKE_PRESET}}${{env.CMAKE_PRESET_MAIN_SUFFIX}}

      - name: 📐 CMake ➔ Build
        run: |
          cmake --build build

      - name: 📦 CMake ➔ Package
        run: |
          cmake --build build --target package
          dir build
          dir build\${{env.ECPACK_NAME}}-files
          copy "build\${{env.ECPACK_NAME}}.json" "build\${{env.ECPACK_NAME}}-files\ecpack.json"

      - name: 🚀 Upload Artifact ➔ ECPACK
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.ECPACK_NAME}}-ecpack
          path: build\${{env.ECPACK_NAME}}-files\

